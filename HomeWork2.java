
/* 


–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ
–±–ª–æ–∫—É –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
–ó–∞–¥–∞–Ω–∏–µ 2.
–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —ç—Ç–æ –Ω–µ
—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞—à–∏—Ö –∑–Ω–∞–Ω–∏–π, –Ω–æ –∏ —à–∞–Ω—Å –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏! üòä



–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
–í–∞—à —Ñ–∞–π–ª `input.txt` —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–ª–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö
–ø—Ä–æ–±–µ–ª–∞–º–∏. –≠—Ç–æ —Å–ª–æ–≤–∞-—Ñ—Ä—É–∫—Ç—ã, –æ–≤–æ—â–∏ –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã.
–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ —ç—Ç–æ –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∏–∫–Ω–∏–∫! üçéü•ïü•ß


–ó–∞–¥–∞–Ω–∏—è:
1. –û—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤:
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤
—Ñ–∞–π–ª–µ `input.txt`.


2. –ù–∞–π—Ç–∏ —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:
–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤
—Ñ–∞–π–ª–µ.


3. –í—ã—á–∏—Å–ª–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É —Å–ª–æ–≤:
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∫–∞–∂–¥–æ–µ
—Å–ª–æ–≤–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Ñ–∞–π–ª–µ. –ü–æ–¥—É–º–∞–π—Ç–µ –æ–± —ç—Ç–æ–º –∫–∞–∫ –æ –ø–æ–¥—Å—á–µ—Ç–µ —Ç–æ–≥–æ,
–∫–∞–∫–∏–µ —Ñ—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞ –≤–∞—à–µ–º –ø–∏–∫–Ω–∏–∫–µ! üçáÔøΩ





 */

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;

public class HomeWork2 {
    public static void main(String[] args)
     {
        
        
         //ReadFile.readFileInMap("input.txt");
         CheckFoods.countFoods(ReadFile.readFileInMap("input.txt"));
         System.out.println("\n –í—Å–µ–≥–æ –≤ —Ñ–∞–π–ª–µ input.txt –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–æ "+CheckFoods.getProductsNumber()+" —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Å—Ç—Ä–æ–∫) \n");
         System.out.println("–°—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è "+CheckFoods.countWords()+" —Å–ª–æ–≤, –≤—Ö–æ–¥—è—â–∏—Ö –≤ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ \n");
         System.out.println("–°–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ –∏–∑ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è —Å–ª–æ–≤ -' "+CheckFoods.findLongestWord()+" ' –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç " +CheckFoods.findLongestWord().get(0).length()+" –±—É–∫–≤.\n");

        
           HashMap<String,Integer> words=CheckFoods.countWordOccureneces();
           int maxOccur=Collections.max(words.values());
           int minOccur=Collections.min(words.values());
           ArrayList <String>  mostOftenMet=new ArrayList<>();
           ArrayList <String>  leastOftenMet=new ArrayList<>();

           for (var  entry : words.entrySet()) 
           {
              if (entry.getValue()==maxOccur) mostOftenMet.add(entry.getKey());
              if (entry.getValue()==minOccur) leastOftenMet.add(entry.getKey());
           }

         System.out.println("–ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞ —Å—Ä–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ' "+mostOftenMet+" ' ("+maxOccur+" —Ä–∞–∑) \n");
         System.out.println("–ù–∞–∏–º–µ–Ω–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–µ–µ—Å—è —Å–ª–æ–≤–æ —Å—Ä–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ' "+leastOftenMet+" ' ("+minOccur+" —Ä–∞–∑) \n");


         //—Å–æ–∑–¥–∞–µ–º Linked hashmap —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ—Ä–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ
         LinkedHashMap<String,Integer> remainingWords = new LinkedHashMap<>();
         int remainingOccur=maxOccur-1;

         while (remainingOccur>minOccur) 
         {
                     
            for (var  entry : words.entrySet()) 
            {
                if((entry.getValue()==remainingOccur) & (remainingOccur>minOccur)) remainingWords.put(entry.getKey(),entry.getValue());
              
            }

            remainingOccur--;
        }

       
        System.out.println("–°–ª–æ–≤–∞, –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –º–µ–Ω–µ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–∑ –Ω–æ –±–æ–ª–µ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: \n"+remainingWords);


         
       
    }
}
